CREATE TABLE ROLE(
    role_name VARCHAR(12) PRIMARY KEY UNIQUE NOT NULL
);

INSERT INTO ROLE VALUES ('STUDENT');
INSERT INTO ROLE VALUES ('TEACHER');
INSERT INTO ROLE VALUES ('ADMIN');

CREATE TABLE FACULTY (
    faculty_id SERIAL PRIMARY KEY,
    faculty_name VARCHAR(24) NOT NULL UNIQUE
);

CREATE TABLE "group" (
    group_id SERIAL PRIMARY KEY,
    group_cipher VARCHAR(24) UNIQUE NOT NULL,

    faculty_id INTEGER REFERENCES FACULTY(faculty_id) NOT NULL
);

CREATE TABLE COURSE (
    value VARCHAR(4) PRIMARY KEY NOT NULL UNIQUE
);

INSERT INTO COURSE VALUES ('I');
INSERT INTO COURSE VALUES ('II');
INSERT INTO COURSE VALUES ('III');
INSERT INTO COURSE VALUES ('VI');

CREATE TABLE "user" (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(36) NOT NULL UNIQUE,
    first_name VARCHAR(24) NOT NULL,
    last_name VARCHAR(24) NOT NULL,
    middle_name VARCHAR(24) NOT NULL,

    position_name VARCHAR(36),

    password VARCHAR(60) NOT NULL,

    role VARCHAR(12) REFERENCES ROLE(role_name) NOT NULL
);

CREATE TABLE USERS_IN_GROUP (
    id SERIAL PRIMARY KEY,

    user_id INTEGER REFERENCES "user"(user_id) UNIQUE NOT NULL,
    group_id INTEGER REFERENCES "group"(group_id) NOT NULL,
    course VARCHAR(4) REFERENCES course(value) NOT NULL
);

CREATE TABLE MESSAGE_STATUS (
    value VARCHAR(6) PRIMARY KEY UNIQUE NOT NULL
);

INSERT INTO MESSAGE_STATUS VALUES ('READ');
INSERT INTO MESSAGE_STATUS VALUES ('UNREAD');

CREATE TABLE MESSAGE (
    id SERIAL PRIMARY KEY,

    title VARCHAR(64) NOT NULL,
    message_body VARCHAR(256) NOT NULL,
    send_date TIMESTAMP NOT NULL DEFAULT NOW(),

    sender_id INTEGER REFERENCES "user"(user_id) NOT NULL
);

CREATE TABLE GROUP_MESSAGE (
    id SERIAL PRIMARY KEY,

    group_id INTEGER REFERENCES "group"(group_id) NOT NULL,
    message_id INTEGER REFERENCES MESSAGE(id) NOT NULL
);

CREATE TABLE FACULTY_MESSAGES (
    id SERIAL PRIMARY KEY,

    faculty_id INTEGER REFERENCES FACULTY(faculty_id) NOT NULL,
    message_id INTEGER REFERENCES MESSAGE(id) NOT NULL
);

CREATE TABLE COURSE_MESSAGES (
      id SERIAL PRIMARY KEY,

      course VARCHAR REFERENCES COURSE(value) NOT NULL,
      message_id INTEGER REFERENCES MESSAGE(id) NOT NULL
);

CREATE TABLE INDIVIDUAL_MESSAGE (
    id SERIAL PRIMARY KEY,

    receiver_id INTEGER REFERENCES "user"(user_id) NOT NULL,
    message_id INTEGER REFERENCES MESSAGE(id) NOT NULL
);

CREATE TABLE SUBJECTS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(24) NOT NULL UNIQUE
);

INSERT INTO subject VALUES ('History');
INSERT INTO subject VALUES ('Maths');


CREATE TABLE TEST (
    id SERIAL PRIMARY KEY,
    theme VARCHAR(36) NOT NULL,

    deadline TIMESTAMP NOT NULL,
    created_at TIMESTAMP NOT NULL,

    creator_id INTEGER REFERENCES "user"(user_id) NOT NULL,

    subject_id INTEGER REFERENCES subject(id) NOT NULL,
    group_id interval REFERENCES "group"(group_id) NOT NULL
);

CREATE TABLE TEST_OPTION (
    id SERIAL PRIMARY KEY,

    question VARCHAR(128) NOT NULL,
    option_1 VARCHAR(36) NOT NULL,
    option_2 VARCHAR(36) NOT NULL,
    option_3 VARCHAR(36) NOT NULL,
    option_4 VARCHAR(36) NOT NULL,
    correct_option SMALLINT NOT NULL,

    test_id INTEGER REFERENCES TEST(id) NOT NULL
);

CREATE TABLE STUDENT_TEST_ATTEMPTS(
    id SERIAL PRIMARY KEY,
    score NUMERIC(3,1) NOT NULL,
    passed_at TIMESTAMP NOT NULL,

    test_id INTEGER REFERENCES TEST(id) NOT NULL,
    student_id INTEGER REFERENCES "user"(user_id) NOT NULL
);
-- CREATE TABLE TEST_FOR_GROUP (
--     id SERIAL PRIMARY KEY,
--
--     test_id INTEGER REFERENCES TEST(id) NOT NULL,
--     group_id INTEGER REFERENCES "group"(group_id) NOT NULL
-- );